/* Generated by AN DISI Unibo */ 
package it.unibo.boundary

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Boundary ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var A = "" 
				var N:Int = 0	
				var Perimeter:Int = 0
				var STEP:Int = 330
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						subscribeToLocalActor("basicrobot") 
						CommUtils.outyellow("$name START")
						delay(2000) 
						request("engage", "engage(boundary,$STEP)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t025",targetState="engaged",cond=whenReply("engagedone"))
					transition(edgeName="t026",targetState="end",cond=whenReply("engagerefused"))
				}	 
				state("engaged") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("engagedone(ARG)"), Term.createTerm("engagedone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 A = payloadArg(0) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="stepping", cond=doswitch() )
				}	 
				state("stepping") { //this:State
					action { //it:State
						if(  N==4  
						 ){forward("end", "end(a)" ,name ) 
						}
						else
						 {request("step", "step($STEP)" ,"basicrobot" )  
						  Perimeter += STEP  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t027",targetState="stepping",cond=whenReply("stepdone"))
					transition(edgeName="t028",targetState="turning",cond=whenReply("stepfailed"))
					transition(edgeName="t029",targetState="end",cond=whenDispatch("end"))
					transition(edgeName="t030",targetState="handle_sonar",cond=whenEvent("sonardata"))
				}	 
				state("turning") { //this:State
					action { //it:State
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						 N += 1  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="stepping", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						forward("disengage", "disengage($A)" ,"basicrobot" ) 
						CommUtils.outyellow("this is my last message, GOODBYE !!! 				Perimeter: $Perimeter")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handle_sonar") { //this:State
					action { //it:State
						request("step", "step($STEP)" ,"basicrobot" )  
						CommUtils.outyellow("WAITING ON SONAR")
						delay(1500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t031",targetState="consume_step",cond=whenReply("stepdone"))
				}	 
				state("consume_step") { //this:State
					action { //it:State
						CommUtils.outmagenta("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMMMMMMMMMMMMMMMMMM")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t032",targetState="stepping",cond=whenReply("stepdone"))
				}	 
			}
		}
} 
