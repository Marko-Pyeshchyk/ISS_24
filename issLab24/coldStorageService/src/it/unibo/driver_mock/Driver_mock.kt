/* Generated by AN DISI Unibo */ 
package it.unibo.driver_mock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Driver_mock ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name START")
						delay(200) 
						request("store", "store(10)" ,"system" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handle_ok",cond=whenReply("store_accepted"))
					transition(edgeName="t06",targetState="handle_no",cond=whenReply("store_rejected"))
				}	 
				state("handle_ok") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("store_accepted(TICKET)"), Term.createTerm("store_accepted(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Ticket = payloadArg(0)  
								CommUtils.outcyan("reply: $Ticket")
								delay(2000) 
								forward("store", "store($Ticket)" ,"system" ) 
								delay(1000) 
								 System.exit(0)  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handle_no") { //this:State
					action { //it:State
						CommUtils.outcyan("goodbye")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
